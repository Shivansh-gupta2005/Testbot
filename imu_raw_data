#include <Wire.h>

#define MPU9250_ADDR 0x68  // MPU9250 I2C address

// MPU9250 Register Addresses
#define ACCEL_XOUT_H 0x3B
#define GYRO_XOUT_H  0x43
#define PWR_MGMT_1   0x6B

// Sensitivity scale factors (assuming ±2g for accelerometer and ±250°/s for gyroscope)
const float accelScale = 16384.0;   // 1g = 16384 LSB (for ±2g)
const float gyroScale = 131.0;      // 1°/s = 131 LSB (for ±250°/s)

float yaw = 0;  // To store calculated yaw angle
unsigned long previousTime = 0;  // To store the previous time in milliseconds

void setup() {
  Wire.begin();
  Serial.begin(115200);

  // Wake up the MPU-9250
  Wire.beginTransmission(MPU9250_ADDR);
  Wire.write(PWR_MGMT_1);  // Power management register
  Wire.write(0);           // Wake the sensor up
  Wire.endTransmission();

  previousTime = millis();  // Initialize previous time
}

void loop() {
  int16_t accelX_raw, accelY_raw, accelZ_raw;
  int16_t gyroX_raw, gyroY_raw, gyroZ_raw;

  // Read raw accelerometer and gyroscope data
  accelX_raw = readMPURegister16(ACCEL_XOUT_H);
  accelY_raw = readMPURegister16(ACCEL_XOUT_H + 2);
  accelZ_raw = readMPURegister16(ACCEL_XOUT_H + 4);

  gyroX_raw = readMPURegister16(GYRO_XOUT_H);
  gyroY_raw = readMPURegister16(GYRO_XOUT_H + 2);
  gyroZ_raw = readMPURegister16(GYRO_XOUT_H + 4);

  // Convert raw values to "g" and "°/s"
  float accelX = accelX_raw / accelScale;
  float accelY = accelY_raw / accelScale;
  float accelZ = accelZ_raw / accelScale;

  float gyroX = gyroX_raw / gyroScale;
  float gyroY = gyroY_raw / gyroScale;
  float gyroZ = gyroZ_raw / gyroScale;  // This is the yaw rate

  // Calculate roll and pitch from accelerometer
  float roll = atan2(accelY, accelZ) * 180.0 / PI;
  float pitch = atan2(-accelX, sqrt(accelY * accelY + accelZ * accelZ)) * 180.0 / PI;

  // Calculate yaw by integrating gyroZ (yaw rate) over time
  unsigned long currentTime = millis();
  float deltaTime = (currentTime - previousTime) / 1000.0;  // Convert to seconds
  previousTime = currentTime;

  yaw += gyroZ * deltaTime;  // Integrate yaw rate to get yaw angle

  // Print roll, pitch, and yaw
  Serial.print("Roll: "); Serial.print(roll); Serial.print("\t");
  Serial.print("Pitch: "); Serial.print(pitch); Serial.print("\t");
  Serial.print("Yaw: "); Serial.println(yaw);

  delay(100);  // Delay for readability
}

// Function to read two bytes (16-bit) from MPU9250 registers
int16_t readMPURegister16(int reg) {
  Wire.beginTransmission(MPU9250_ADDR);
  Wire.write(reg);  // Register to read
  Wire.endTransmission(false);
  Wire.requestFrom(MPU9250_ADDR, 2, true);  // Request 2 bytes
  int16_t value = (Wire.read() << 8) | Wire.read();  // Combine high and low bytes
  return value;
}
